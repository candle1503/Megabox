<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mega.s1.movie.MovieRepository">

	<resultMap type="MovieFileVO" id="MovieFileVO">
		<id column="fileNum" property="fileNum" />
		<result column="fileName" property="fileName"/>
		<result column="oriName" property="oriName"/>		
	</resultMap>
	
	<resultMap type="MovieVO" id="MovieVO">
		<id column="movieNum" property="movieNum"/>
		<result column="name" property="name"/>
		<result column="director" property="director"/>
		<result column="genre" property="genre"/>
		<result column="rate" property="rate"/>
		<result column="openDay" property="openDay"/>
		<result column="age" property="age"/>
		<result column="contents" property="contents"/>
		<result column="like" property="like"/>
		<result column="character" property="character"/>
		<result column="playTime" property="playTime"/>
		<result column="views" property="views"/>
		<result column="bookingRate" property="bookingRate" />
		<collection property="movieFileVO" resultMap="MovieFileVO"></collection>
	</resultMap>
	
	<select id="movieList" parameterType="java.lang.Integer" resultMap="MovieVO">
		select M.*, MF.fileName from movie M left join (select F.fileNum, F.fileName, F.movieNum 
		from movieFile as F, 
		(select movieNum, min(fileNum) as min_fileNum from movieFile where status=2 group by movieNum) as F2 
		where F.fileNum = F2.min_fileNum and F.movieNum = F2.movieNum) as MF
		on M.movieNum = MF.movieNum
		order by bookingRate desc
		limit #{startNum}, 12
	</select>
	
	<select id="movieCount" resultType="Long">
		select count(movieNum) from movie
	</select>
	
	<select id="futureCount" resultType="Long">
		select count(movieNum) from movie where openDay>sysdate()
	</select>
	
	<select id="ingCount" resultType="Long">
		select count(movieNum) from movie where sysdate()>=openDay;
	</select>


	<select id="movieSelect" parameterType="MovieVO" resultType="MovieVO">
		select * from movie where movieNum=#{movieNum}
	</select>

	<insert id="reviewInsert" parameterType="ReviewVO">
		insert into review values(0, #{writer}, #{point}, #{contents}, sysdate(), #{ticketNum}, #{movieNum}, #{likePoint} )
	</insert>
	
	<select id="reviewList" parameterType="Pager" resultType="ReviewVO">
		select * from review where movieNum=#{movieNum} 
		order by reviewNum desc 
		limit #{startRow}, 10
	</select>
	
	<select id="boardCount" parameterType="Pager" resultType="Long">
		select count(movieNum) from review where movieNum=#{movieNum}
	</select>
	
	
	
	<select id="reviewRate" parameterType="ReviewVO" resultType="java.lang.Double">
		select avg(point) from review where movieNum=#{movieNum}
	</select>
	
	<update id="rateUpdate" parameterType="MovieVO">
		update movie set rate=#{rate} where movieNum=#{movieNum}
	</update>
	
	<select id="player" parameterType="MovieVO" resultType="Long">
		select count(likePoint) from review where movieNum=#{movieNum} and likePoint='배우'
	</select>
	
	<select id="direct" parameterType="MovieVO" resultType="Long">
		select count(likePoint) from review where movieNum=#{movieNum} and likePoint='연출'
	</select>
	<select id="ost" parameterType="MovieVO" resultType="Long">
		select count(likePoint) from review where movieNum=#{movieNum} and likePoint='ost'
	</select>
	
	<select id="story" parameterType="MovieVO" resultType="Long">
		select count(likePoint) from review where movieNum=#{movieNum} and likePoint='스토리'
	</select>
	<select id="beauty" parameterType="MovieVO" resultType="Long">
		select count(likePoint) from review where movieNum=#{movieNum} and likePoint='영상미'
	</select>
	
	<update id="likeUpdate" parameterType="MovieVO">
		update movie set movie.like=#{like}+1 where movieNum=#{movieNum}
	</update>
	
	<insert id="movieInsert" parameterType="MovieVO" useGeneratedKeys="true" keyProperty="movieNum">
		insert into movie values (0, #{name}, #{director}, #{genre}, 0, #{openDay}, #{age}, #{contents}, 0, #{character}, #{playTime}, 0, 0)
	</insert>
	
	<delete id="movieDelete" parameterType="MovieVO">
		delete from movie where movieNum=#{movieNum}
	</delete>
	
	<select id="futureList" parameterType="java.lang.Integer" resultMap="MovieVO">
	<![CDATA[
		select M.*, MF.fileName from movie M left join (select F.fileNum, F.fileName, F.movieNum 
		from movieFile as F, 
		(select movieNum, min(fileNum) as min_fileNum from movieFile where status=2 group by movieNum) as F2 
		where F.fileNum = F2.min_fileNum and F.movieNum = F2.movieNum) as MF
		on M.movieNum = MF.movieNum
		where M.openDay > sysdate()
		order by bookingRate desc 
		limit #{startNum}, 12
		]]>
	</select>
	
	<select id="ingList" parameterType="java.lang.Integer" resultMap="MovieVO">
	<![CDATA[
		select M.*, MF.fileName from movie M left join (select F.fileNum, F.fileName, F.movieNum 
		from movieFile as F, 
		(select movieNum, min(fileNum) as min_fileNum from movieFile where status=2 group by movieNum) as F2 
		where F.fileNum = F2.min_fileNum and F.movieNum = F2.movieNum) as MF
		on M.movieNum = MF.movieNum
		where M.openDay <= sysdate() 
		order by bookingRate desc
		limit #{startNum}, 12
		]]>
	</select>
	
	<update id="movieUpdate" parameterType="MovieVO">
		update movie set name=#{name}, director=#{director}, genre=#{genre}, openDay=#{openDay}, age=#{age}, contents=#{contents}, movie.character=#{character}, playTime=#{playTime}
		where movieNum=#{movieNum}
	</update>
	

	
	<select id="ranking" parameterType="MovieVO" resultType="Long">
		select (SELECT COUNT(*) FROM movie WHERE bookingRate >= t.bookingRate) AS ranking, t.name
		FROM movie t
		WHERE t.movieNum = #{movieNum}
	</select>
	
	<select id="ageCount" parameterType="MovieVO" resultType="Long">
		select count(ticketNum) count from 
		(select t.*, m.age from ticket t left join member m 
		on t.id=m.id
		where movieNum=#{movieNum}) as ag where age between 0+#{ages} and 9+#{ages}
	</select>
	
	<select id="child" parameterType="MovieVO" resultType="Long">
		select count(ticketNum) count from 
		(select t.*, m.age from ticket t left join member m 
		on t.id=m.id
		where movieNum=#{movieNum}) as ag where 20>age 
	</select>
	
	<select id="old" parameterType="MovieVO" resultType="Long">
		select count(ticketNum) count from 
		(select t.*, m.age from ticket t left join member m 
		on t.id=m.id
		where movieNum=#{movieNum}) as ag where age>=50
	</select>
	
	<select id="viewCount" parameterType="MovieVO" resultType="Long">
		select IFNULL(sum(count), 0) from ticket 
		where viewDate between 
		(SELECT date_add(now(),INTERVAL-1-#{ages} DAY) FROM dual) and (SELECT date_add(now(),INTERVAL -0-#{ages} DAY) FROM dual) and movieNum=#{movieNum}
	</select>
	
	<select id="viewUpCount" resultType="MovieVO">
		select movieNum, sum(count) as ages from ticket 
		where viewDate between 
		(SELECT date_add(sysdate(),INTERVAL -1 DAY) FROM dual) and (SELECT date_add(sysdate(),INTERVAL 0 DAY) FROM dual) group by movieNum
	</select>

	
	<update id="viewUp" parameterType="MovieVO">
		update movie set views=#{views}+#{ages} where movieNum=#{movieNum}
	</update>
	
	<select id="canLike" parameterType="TicketVO" resultType="TicketVO">
		select * from ticket where id=#{id} and movieNum=#{movieNum} and status=2
	</select>
	
	<update id="likeDone" parameterType="TicketVO">
		update ticket set status=3 where ticketNum=#{ticketNum}
	</update>
	
</mapper>